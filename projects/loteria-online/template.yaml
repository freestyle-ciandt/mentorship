AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"

Description: Template b√°sico para resolver as tarefas

Resources:
  TabelaApostas: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${AWS::StackName}_apostas
      AttributeDefinitions: 
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "id"
          KeyType: "HASH"
      GlobalSecondaryIndexes: 
        - 
          IndexName: "email_index"
          KeySchema: 
            - AttributeName: "email" 
              KeyType: "HASH"
          Projection: 
            ProjectionType: "ALL"
      BillingMode: PAY_PER_REQUEST
    

  LoteriaOnlineApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        ApiKeyRequired: true
      Models:
        Aposta:
          type: object
          required:
            - email
            - numeros
          properties:
            email:
              type: string
            numeros:
              type: array

  createApostasFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Events:
        BitlyApi:
          Type: Api
          Properties:
            RestApiId: !Ref LoteriaOnlineApi
            Path: /aposta
            Method: POST
      CodeUri: ./src/loteria-online
      Handler: createApostas.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TabelaApostas
      Policies:
        - Statement: 
          - Effect: 'Allow'
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:BatchWriteItem'
            Resource:
              - !GetAtt TabelaApostas.Arn

  getApostasFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Events:
        BitlyApi:
          Type: Api
          Properties:
            RestApiId: !Ref LoteriaOnlineApi
            Path: /apostas
            Method: GET
      CodeUri: ./src/loteria-online
      Handler: getApostas.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TabelaApostas
      Policies:
        - Statement: 
          - Effect: 'Allow'
            Action:
              - 'dynamodb:Query'
            Resource:
              - !Sub '${TabelaApostas.Arn}/index/email_index'

  deleteApostasFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs12.x
      Events:
        BitlyApi:
          Type: Api
          Properties:
            RestApiId: !Ref LoteriaOnlineApi
            Path: /aposta/{id}
            Method: DELETE
      CodeUri: ./src/loteria-online
      Handler: deleteApostas.handler
      Environment:
        Variables:
          TABLE_NAME: !Ref TabelaApostas
      Policies:
        - Statement: 
          - Effect: 'Allow'
            Action:
              - 'dynamodb:DeleteItem'
            Resource:
              - !GetAtt TabelaApostas.Arn

              # - !Sub '${TabelaApostas.Arn}/index/email_index'
  TabelaSorteios: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: !Sub ${AWS::StackName}_sorteios
      AttributeDefinitions: 
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST